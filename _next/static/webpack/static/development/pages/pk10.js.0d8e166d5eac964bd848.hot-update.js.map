{"version":3,"file":"static/webpack/static/development/pages/pk10.js.0d8e166d5eac964bd848.hot-update.js","sources":["webpack:///./components/pk10/control-panel.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\n\nimport { Grid, ButtonBase, Input } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport BaseContainer from '../base-container';\nimport { LoadingModal, ErrorModal, MessageModal } from '../common';\nimport { selectors, actions } from '../../redux';\nimport errorParser from '../../libs/error-parser';\nimport { encodePK10Bet } from '../../libs/format-helper';\nimport EosClient from '../../libs/eos-client';\nimport colors from '../../libs/styleguide/colors';\nimport t from '../../libs/i18n-util';\n\nconst baseFrame = {\n  height: 36,\n  backgroundColor: colors.darkGrey3,\n  fontSize: 16,\n  lineHeight: '36px',\n  textAlign: 'center',\n  borderRadius: 4,\n};\n\nconst styles = {\n  root: {\n    height: 160,\n    width: '100vw',\n    backgroundColor: colors.darkGrey2,\n    position: 'fixed',\n    left: 0,\n    bottom: 0,\n  },\n  buttonGroup: {\n    width: '100%',\n    height: 50,\n    backgroundColor: colors.darkGrey,\n    margin: '5px 0px 0px 0px',\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-evenly',\n  },\n  button1: {\n    fontSize: 14,\n    width: 60,\n    height: 36,\n    color: colors.white,\n    borderRadius: 4,\n    border: `solid 1px ${colors.pinkRed}`,\n  },\n  button2: {\n    fontSize: 14,\n    width: 60,\n    height: 36,\n    color: '#000000',\n    borderRadius: 4,\n    backgroundImage: 'linear-gradient(199deg, #ffee69, #f8be3b)',\n  },\n  betCount: {\n    height: 44,\n    backgroundColor: colors.darkGrey,\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-evenly',\n  },\n  totalCost: {\n    height: 44,\n    backgroundColor: colors.darkGrey,\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-evenly',\n  },\n  frame1: {\n    width: 46,\n    ...baseFrame,\n  },\n  frame2: {\n    width: 145,\n    ...baseFrame,\n  },\n  frame3: {\n    width: 86,\n    ...baseFrame,\n  },\n  eos: {\n    color: '#b0b0b0',\n    fontSize: 14,\n  },\n  line: {\n    width:'100vw',\n    marginBottom: 20,\n    height: 1,\n    backgroundColor: '#5c5d68',\n  }\n};\n\n/** @type {EosClient} */\nconst eosClient = EosClient.getInstance();\n\n@connect(({ pk10 })=> ({ pk10 }))\nclass ControlPanel extends React.Component {\n\n  state = {\n    loadingModal: false,\n    errorModal: false,\n    messageModal: false,\n    error: {},\n    betPrice: 1.00,\n  }\n\n  getBetCount() {\n    const currentTable = selectors.pk10CurrentTable(this.props);\n    let selection = [];\n    let count = 0;\n    switch (currentTable) {\n    case 'singleBet':\n      selection = selectors.pk10BetsSingleBet(this.props).selection;\n      break;\n    case 'first2Sum':\n      selection = selectors.pk10BetsFirst2Sum(this.props).selection;\n      break;\n    case 'fiveElements':\n      selection = selectors.pk10BetsFiveElement(this.props).selection;\n      break;\n    case 'bigSmallOddEven':\n      selection = selectors.pk10BetsBigSmallOddEven(this.props).selection;\n      break;\n    case 'dragonTiger':\n      selection = selectors.pk10BetsDragonTiger(this.props).selection;\n      break;\n    case 'compoundBet2':\n      selection = selectors.pk10BetsCompoundBet2(this.props).selection;\n      break;\n    case 'compoundBet3':\n      selection = selectors.pk10BetsCompoundBet3(this.props).selection;\n      break;\n    default:\n      return count;\n    }\n\n    // special cases\n    console.log(currentTable, selection, count);\n    if (currentTable === 'compoundBet2' || currentTable === 'compoundBet3') {\n\n      return count;\n    }\n\n    for (let row of selection) {\n      if (_.isArray(row)) {\n        for (let value of row) {\n          count += (value === true);\n        }\n      } else {\n        count += (row === true);\n      }\n    }\n    return count;\n  }\n\n  clickBet = async () => {\n    this.setState({ loadingModal: true });\n\n    const currentTable = selectors.pk10CurrentTable(this.props);\n    const { selection } = selectors.pk10CurrentTableBets(this.props);\n    const { action, item } = encodePK10Bet(currentTable, selection);\n    const betPrice = this.state.betPrice;\n    const betCount = this.getBetCount();\n    const quantity = `${(betPrice * betCount).toFixed(4)} EOS`;\n    const referrer = 'bjpkten';\n    try {\n      const result = await eosClient.pk10Bet(quantity, betPrice * 10000, betCount, referrer, action, item);\n      console.log(result);\n      this.setState({\n        loadingModal: false,\n        messageModal: true,\n      });\n    } catch (error){\n      const rngError = errorParser(error);\n      this.setState({\n        loadingModal: false,\n        errorModal: true,\n        error: rngError,\n      });\n      console.error(error, rngError);\n    }\n  }\n\n  handleModalClose = name => () => this.setState({ [name]: false });\n\n  handleClickRandom = async () => {\n    this.props.dispatch(actions.pk10RandomSelect());\n  }\n\n  handleClickClear = async () => {\n    this.props.dispatch(actions.pk10ClearSelection());\n  }\n\n  handleInputChange = (event) => {\n    const { value } = event.target;\n    this.setState({ betPrice: value });\n    if (isNaN(value) === false && value >= 0) {\n      this.setState({ betPrice: value });\n    } else if (value === '') {\n      this.setState({ betPrice: '' });\n    }\n  }\n\n  handleInputBlur = (event) => {\n    const { value } = event.target;\n    if (value === '') {\n      this.setState({ betPrice: 0.1000 });\n    } else {\n      this.setState({ betPrice: parseFloat(value) });\n    }\n  }\n\n\n  render() {\n    const { classes } = this.props;\n    const betCount = this.getBetCount();\n    const total = (this.state.betPrice * betCount).toFixed(2);\n    return (\n      <div className={classes.root}>\n        <div className={classes.line}/>\n        <BaseContainer background={false}>\n          <Grid container spacing={8}>\n            <Grid item xs={4}>\n              <div className={classes.betCount}>\n                <div className={classes.frame1}>{betCount}</div>\n                <div>{t('bet')}</div>\n              </div>\n            </Grid>\n            <Grid item xs={8}>\n              <div className={classes.totalCost}>\n                <div>{t('total_cost')}</div>\n                <div className={classes.frame2}>{total} <span className={classes.eos}>EOS</span></div>\n              </div>\n            </Grid>\n          </Grid>\n          <div className={classes.buttonGroup}>\n            <ButtonBase className={classes.button1} onClick={this.handleClickClear}>{t('reset')}</ButtonBase>\n            <div>{t('each_bet')}</div>\n            <div className={classes.frame3}>\n              <Input disableUnderline={true} inputProps={{\n                style: {\n                  color: '#ffffff',\n                  fontSize: 16,\n                  backgroundColor: 'transparent',\n                  border: 0,\n                  textAlign: 'center',\n                }\n              }} value={parseFloat(this.state.betPrice).toFixed(2)}\n              onChange={this.handleInputChange}\n              onBlur={this.handleInputBlur} />\n            </div>\n\n            <ButtonBase className={classes.button1} onClick={this.handleClickRandom}>{t('random_select')}</ButtonBase>\n            <ButtonBase className={classes.button2} onClick={this.clickBet}>{t('go_bet')}</ButtonBase>\n          </div>\n        </BaseContainer>\n        <LoadingModal open={this.state.loadingModal}/>\n        <ErrorModal\n          open={this.state.errorModal}\n          error={this.state.error}\n          onClose={this.handleModalClose('errorModal')}/>\n        <MessageModal open={this.state.messageModal} onClose={this.handleModalClose('messageModal')}>\n          {t('success_bet')}\n        </MessageModal>\n      </div>\n    );\n  }\n}\n\nControlPanel.propTypes = {\n  classes: PropTypes.object.isRequired,\n  dispatch: PropTypes.func,\n};\n\nexport default withStyles(styles)(ControlPanel);"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AADA;AAIA;AACA;AADA;AAIA;AACA;AADA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAJA;AAnEA;AA2EA;AACA;AAAA;AAGA;AADA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;;;;;AAwDA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAHA;AAAA;AAMA;AACA;AACA;AACA;AATA;AAAA;AAAA;AACA;AADA;AAWA;AACA;AACA;AAAA;AACA;AACA;AAFA;AACA;AAdA;AAAA;AACA;AADA;AAAA;AAAA;AAkBA;AACA;AAAA;AACA;AACA;AACA;AAHA;AACA;AAIA;AACA;AAzBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA2BA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;;;;;;AAzGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAvBA;AACA;AACA;AAyBA;AACA;AAAA;AAEA;AACA;AACA;AApCA;AAAA;AAAA;AACA;AADA;AAqCA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AA7CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA6CA;AACA;;;AA4DA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AADA;AAQA;AACA;AACA;AAVA;AAaA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AAHA;AAIA;AAAA;AAAA;AAKA;;;;AA1KA;AA6KA;AACA;AACA;AAFA;AAKA;;;;A","sourceRoot":""}